<!DOCTYPE html>
<html>
<head>
    <title><%= title %></title> <link rel="stylesheet" href="/style.css"> <style>
        #chatbox { height: 300px; width: 400px; border: 1px solid #ccc; overflow-y: scroll; margin-bottom: 10px; padding: 5px; }
        .message { margin-bottom: 5px; }
        .my-message { text-align: right; color: blue; }
        .whatsapp-message { text-align: left; color: green; }
        .system-message { font-style: italic; color: gray; font-size: 0.9em;}
    </style>
</head>
<body>
    <h1>WhatsApp Chat</h1>
    
    <div id="chatbox">
        <div class="system-message">Connecting...</div>
    </div>
    <input type="text" id="messageInput" placeholder="Type your message..." size="40">
    <button id="sendButton">Send</button>

    <script>
        const chatbox = document.getElementById('chatbox');
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');

        // Determine WebSocket protocol based on window location protocol
        const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        const wsUrl = `<span class="math-inline">\{wsProtocol\}//</span>{window.location.host}`; // Connect to the same host/port
        let socket;

        function addMessage(text, className = 'system-message') {
            const div = document.createElement('div');
            div.classList.add('message', className);
            div.textContent = text;
            chatbox.appendChild(div);
            chatbox.scrollTop = chatbox.scrollHeight; // Scroll to bottom
        }

        function connectWebSocket() {
            addMessage('Connecting to WebSocket...');
            socket = new WebSocket(wsUrl);

            socket.onopen = function(event) {
                console.log('WebSocket connection opened');
                addMessage('Connected!', 'system-message');
            };

            socket.onmessage = function(event) {
                console.log('Message from server:', event.data);
                try {
                    const messageData = JSON.parse(event.data);
                    if (messageData.type === 'whatsapp_message') {
                        addMessage(`WhatsApp: ${messageData.payload}`, 'whatsapp-message');
                    } else if (messageData.type === 'your_message') {
                        // If server echoes back your sent message (optional)
                        addMessage(`You: ${messageData.payload}`, 'my-message');
                    } else if (messageData.type === 'connection_ack') {
                         addMessage(`Server: ${messageData.payload}`, 'system-message');
                    } else if (messageData.type === 'error') {
                         addMessage(`Error: ${messageData.payload}`, 'system-message');
                    }
                    else {
                        addMessage(`Server: ${messageData.payload || event.data}`, 'system-message'); // Fallback
                    }
                } catch (e) {
                    console.error("Error parsing server message:", e);
                    addMessage(`Raw message: ${event.data}`, 'system-message'); // Display raw if parse fails
                }
            };

            socket.onclose = function(event) {
                console.log('WebSocket connection closed:', event);
                addMessage(`Disconnected. Code: ${event.code}. ${event.reason ? 'Reason: ' + event.reason : ''}`, 'system-message');
                activeChatSocket = null; // Ensure server knows
                // Optional: Try to reconnect after a delay
                setTimeout(connectWebSocket, 5000); // Reconnect after 5 seconds
            };

            socket.onerror = function(error) {
                console.error('WebSocket error:', error);
                addMessage('WebSocket error occurred. Check console.', 'system-message');
                // The 'onclose' event will usually fire after an error.
            };
        }


        function sendMessage() {
            const messageText = messageInput.value.trim();
            if (messageText && socket && socket.readyState === WebSocket.OPEN) {
                const messagePayload = {
                    type: 'chat_message',
                    payload: messageText
                };
                socket.send(JSON.stringify(messagePayload));
                console.log('Sent message to server:', messagePayload);
                 // Add message to UI immediately for better UX
                addMessage(`You: ${messageText}`, 'my-message');
                messageInput.value = ''; // Clear input
            } else if (!socket || socket.readyState !== WebSocket.OPEN) {
                 addMessage('Not connected. Cannot send message.', 'system-message');
            }
        }

        sendButton.addEventListener('click', sendMessage);
        messageInput.addEventListener('keypress', function(event) {
            if (event.key === 'Enter') {
                sendMessage();
            }
        });

        // Initial connection attempt
        connectWebSocket();

    </script>
</body>
</html>